<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="5S{e#J+X]s@rm?P9PHkg" x="20" y="20"><statement name="HANDLER"><block type="typescript_statement" id="wLLO$Mi~#4%XJ63wACf`"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace Dog_Commands {" line1="    const debounceInterval = 500;" line2="    const moveDebounceInterval = 100;" line3="    let lastCommandTime = 0;" line4="" line5="    // ========= PINK COLOR FUNCTIONS (MOVEMENT &amp; MODE) =========" line6="" line7="    // Movement Command" line8="    //% group=&quot;Movement&quot;" line9="    //% blockId=MoveGo2" line10="    //% block=&quot;Move Dog x:%x y:%y z:%z&quot;" line11="    //% x.min=-1 x.max=1 x.defl=0" line12="    //% y.min=-1 y.max=1 y.defl=0" line13="    //% z.min=-1 z.max=1 z.defl=0" line14="    //% weight=100 " line15="    //% color=&quot;#ff6680&quot; " line16="    //% icon=&quot;\uf021&quot;" line17="    export function moveDog(x: number, y: number, z: number) {" line18="        const currentTime = control.millis();" line19="        if (currentTime - lastCommandTime &gt; moveDebounceInterval) {" line20="            lastCommandTime = currentTime;" line21="            let command = `Move,${x},${y},${z}\n`;" line22="            radio.sendString(command);" line23="            console.log(`Move command sent: ${command}`);" line24="        } else {" line25="            console.log(&quot;Move command skipped due to debounce interval&quot;);" line26="        }" line27="    }" line28="" line29="    export enum ModeSwitch {" line30="        //% block=&quot;Normal Mode&quot;" line31="        Normal," line32="        //% block=&quot;AI Mode&quot;" line33="        AI," line34="    }" line35="" line36="    /**" line37="     * Mode Switcher" line38="     */" line39="    //% blockId=Mode_Switcher" line40="    //% group=&quot;Mode Switch&quot;" line41="    //% block=&quot;Change Mode to %mode&quot;" line42="    //% weight=100 " line43="    //% color=&quot;#ff6680&quot; " line44="    //% icon=&quot;\uf021&quot;" line45="    export function modeSwitch(mode: ModeSwitch) {" line46="        const currentTime2 = control.millis();" line47="        if (currentTime2 - lastCommandTime &gt; debounceInterval) {" line48="            lastCommandTime = currentTime2;" line49="            switch (mode) {" line50="                case ModeSwitch.Normal:" line51="                    radio.sendString(&quot;normal\n&quot;);" line52="                    console.log(&quot;Mode: Changing to Normal mode&quot;);" line53="                    break;" line54="                case ModeSwitch.AI:" line55="                    radio.sendString(&quot;ai\n&quot;);" line56="                    console.log(&quot;Mode: Changing to AI Mode&quot;);" line57="                    break;" line58="                default:" line59="                    console.log(&quot;Unknown mode command&quot;);" line60="            }" line61="        }" line62="    }" line63="" line64="    // ========= NORMAL &amp; AI COMMAND FUNCTIONS =========" line65="    " line66="    // Normal Mode Commands" line67="    export enum NormalCommands {" line68="        //% block=&quot;Sit&quot;" line69="        Sit," line70="        //% block=&quot;RiseSit&quot;" line71="        RiseSit," line72="        //% block=&quot;StandUp&quot;" line73="        StandUp," line74="        //% block=&quot;StandDown&quot;" line75="        StandDown," line76="        //% block=&quot;Hello&quot;" line77="        Hello," line78="        //% block=&quot;Stretch&quot;" line79="        Stretch," line80="        //% block=&quot;Wallow&quot;" line81="        Wallow," line82="        //% block=&quot;Dance 1&quot;" line83="        Dance1," line84="        //% block=&quot;Dance 2&quot;" line85="        Dance2," line86="        //% block=&quot;Front Jump&quot;" line87="        FrontJump," line88="        //% block=&quot;Front Pounce&quot;" line89="        FrontPounce" line90="    }" line91="" line92="    //% blockId=Normal_Command" line93="    //% block=&quot;(Normal) Tell Dog to %command&quot;" line94="    //% group=&quot;Commands&quot;" line95="    //% command.fieldEditor=&quot;gridpicker&quot;" line96="    //% command.fieldOptions.columns=4" line97="    //% command.fieldOptions.tooltips=&quot;false&quot;" line98="    //% command.fieldOptions.width=&quot;100&quot;" line99="    //% weight=98 " line100="    //% color=&quot;#9370DB&quot; " line101="    //% icon=&quot;\uf021&quot;" line102="    export function sendNormalCommand(command: NormalCommands) {" line103="        const currentTime3 = control.millis();" line104="        if (currentTime3 - lastCommandTime &gt; debounceInterval) {" line105="            lastCommandTime = currentTime3;" line106="            switch (command) {" line107="                case NormalCommands.Sit:" line108="                    radio.sendString(&quot;Sit \n&quot;);" line109="                    console.log(&quot;Command: Sit&quot;);" line110="                    break;" line111="                case NormalCommands.RiseSit:" line112="                    radio.sendString(&quot;RiseSit \n&quot;);" line113="                    console.log(&quot;Command: RiseSit&quot;);" line114="                    break;" line115="                case NormalCommands.StandUp:" line116="                    radio.sendString(&quot;StandUp \n&quot;);" line117="                    console.log(&quot;Command: StandUp&quot;);" line118="                    break;" line119="                case NormalCommands.StandDown:" line120="                    radio.sendString(&quot;StandDown \n&quot;);" line121="                    console.log(&quot;Command: StandDown&quot;);" line122="                    break;" line123="                case NormalCommands.Hello:" line124="                    radio.sendString(&quot;Hello \n&quot;);" line125="                    console.log(&quot;Command: Hello&quot;);" line126="                    break;" line127="                case NormalCommands.Stretch:" line128="                    radio.sendString(&quot;Stretch \n&quot;);" line129="                    console.log(&quot;Command: Stretch&quot;);" line130="                    break;" line131="                case NormalCommands.Wallow:" line132="                    radio.sendString(&quot;Wallow \n&quot;);" line133="                    console.log(&quot;Command: Wallow&quot;);" line134="                    break;" line135="                case NormalCommands.Dance1:" line136="                    radio.sendString(&quot;Dance1 \n&quot;);" line137="                    console.log(&quot;Command: Dance 1&quot;);" line138="                    break;" line139="                case NormalCommands.Dance2:" line140="                    radio.sendString(&quot;Dance2 \n&quot;);" line141="                    console.log(&quot;Command: Dance 2&quot;);" line142="                    break;" line143="                case NormalCommands.FrontJump:" line144="                    radio.sendString(&quot;FrontJump \n&quot;);" line145="                    console.log(&quot;Command: Front Jump&quot;);" line146="                    break;" line147="                case NormalCommands.FrontPounce:" line148="                    radio.sendString(&quot;FrontPounce \n&quot;);" line149="                    console.log(&quot;Command: Front Pounce&quot;);" line150="                    break;" line151="                default:" line152="                    console.log(&quot;Unknown command&quot;);" line153="            }" line154="        }" line155="    }" line156="" line157="    // AI Mode Commands" line158="    export enum AICommands {" line159="        //% block=&quot;Handstand&quot;" line160="        Handstand," line161="        //% block=&quot;StandDown&quot;" line162="        StandDown," line163="        //% block=&quot;Bound&quot;" line164="        Bound," line165="        //% block=&quot;BackFlip&quot;" line166="        BackFlip," line167="        //% block=&quot;FrontFlip&quot;" line168="        FrontFlip" line169="    }" line170="" line171="    //% blockId=AI_Command" line172="    //% block=&quot;(AI) Tell Dog to %command&quot;" line173="    //% group=&quot;Commands&quot;" line174="    //% command.fieldEditor=&quot;gridpicker&quot;" line175="    //% command.fieldOptions.columns=4" line176="    //% command.fieldOptions.tooltips=&quot;false&quot;" line177="    //% command.fieldOptions.width=&quot;100&quot;" line178="    //% weight=97 " line179="    //% color=&quot;#FFD700&quot; " line180="    //% icon=&quot;\uf021&quot;" line181="    export function sendAICommand(command: AICommands) {" line182="        const currentTime4 = control.millis();" line183="        if (currentTime4 - lastCommandTime &gt; debounceInterval) {" line184="            lastCommandTime = currentTime4;" line185="            switch (command) {" line186="                case AICommands.Handstand:" line187="                    radio.sendString(&quot;Handstand \n&quot;);" line188="                    console.log(&quot;Command: Handstand&quot;);" line189="                    break;" line190="                case AICommands.StandDown:" line191="                    radio.sendString(&quot;StandDown \n&quot;);" line192="                    console.log(&quot;Command: StandDown&quot;);" line193="                    break;" line194="                case AICommands.Bound:" line195="                    radio.sendString(&quot;Bound \n&quot;);" line196="                    console.log(&quot;Command: Bound&quot;);" line197="                    break;" line198="                case AICommands.BackFlip:" line199="                    radio.sendString(&quot;BackFlip \n&quot;);" line200="                    console.log(&quot;Command: BackFlip&quot;);" line201="                    break;" line202="                case AICommands.FrontFlip:" line203="                    radio.sendString(&quot;FrontFlip \n&quot;);" line204="                    console.log(&quot;Command: FrontFlip&quot;);" line205="                    break;" line206="                default:" line207="                    console.log(&quot;Unknown command&quot;);" line208="            }" line209="        }" line210="    }" line211="" line212="    // ========= GREEN COLOR FUNCTIONS (ON/OFF TOGGLES) =========" line213="" line214="    export enum ObstacleAvoidance {" line215="        //% block=&quot;Obstacle Avoidance On&quot;" line216="        ObstacleOn," line217="        //% block=&quot;Obstacle Avoidance Off&quot;" line218="        ObstacleOff" line219="    }" line220="" line221="    export enum FreeAvoidance {" line222="        //% block=&quot;Free Avoidance On&quot;" line223="        FreeAvoidOn," line224="        //% block=&quot;Free Avoidance Off&quot;" line225="        FreeAvoidOff" line226="    }" line227="" line228="    export enum StairWalking {" line229="        //% block=&quot;Stair Walking On&quot;" line230="        StairWalkOn," line231="        //% block=&quot;Stair Walking Off&quot;" line232="        StairWalkOff" line233="    }" line234="" line235="    export enum LeadFollow {" line236="        //% block=&quot;Lead Follow On&quot;" line237="        LeadFollowOn," line238="        //% block=&quot;Lead Follow Off&quot;" line239="        LeadFollowOff" line240="    }" line241="" line242="    export enum FreeBound {" line243="        //% block=&quot;Free Bound On&quot;" line244="        FreeBoundOn," line245="        //% block=&quot;Free Bound Off&quot;" line246="        FreeBoundOff" line247="    }" line248="" line249="    export enum FreeJump {" line250="        //% block=&quot;Free Jump On&quot;" line251="        FreeJumpOn," line252="        //% block=&quot;Free Jump Off&quot;" line253="        FreeJumpOff" line254="    }" line255="" line256="    /**" line257="     * Obstacle Avoidance Control" line258="     */" line259="    //% blockId=Obstacle_Avoidance_Control" line260="    //% block=&quot;Set %mode&quot;" line261="    //% weight=99" line262="    //% color=&quot;#33cc33&quot;" line263="    //% icon=&quot;\uf05b&quot;" line264="    export function obstacleAvoidanceControl(mode: ObstacleAvoidance) {" line265="        const currentTime5 = control.millis();" line266="        if (currentTime5 - lastCommandTime &gt; debounceInterval) {" line267="            lastCommandTime = currentTime5;" line268="            switch (mode) {" line269="                case ObstacleAvoidance.ObstacleOn:" line270="                    radio.sendString(&quot;ObstacleOn\n&quot;);" line271="                    console.log(&quot;Obstacle Avoidance: Enabling&quot;);" line272="                    break;" line273="                case ObstacleAvoidance.ObstacleOff:" line274="                    radio.sendString(&quot;ObstacleOff\n&quot;);" line275="                    console.log(&quot;Obstacle Avoidance: Disabling&quot;);" line276="                    break;" line277="                default:" line278="                    console.log(&quot;Unknown obstacle command&quot;);" line279="            }" line280="        }" line281="    }" line282="" line283="    /**" line284="     * Free Avoidance Control " line285="     */" line286="    //% blockId=Free_Avoidance_Control" line287="    //% block=&quot;Set Free Avoidance %mode&quot;" line288="    //% weight=98" line289="    //% color=&quot;#33cc33&quot;" line290="    //% icon=&quot;\uf05b&quot;" line291="    export function freeAvoidanceControl(mode: FreeAvoidance) {" line292="        const currentTime6 = control.millis();" line293="        if (currentTime6 - lastCommandTime &gt; debounceInterval) {" line294="            lastCommandTime = currentTime6;" line295="            switch (mode) {" line296="                case FreeAvoidance.FreeAvoidOn:" line297="                    radio.sendString(&quot;FreeAvoidOn\n&quot;);" line298="                    console.log(&quot;Free Avoidance: Enabling&quot;);" line299="                    break;" line300="                case FreeAvoidance.FreeAvoidOff:" line301="                    radio.sendString(&quot;FreeAvoidOff\n&quot;);" line302="                    console.log(&quot;Free Avoidance: Disabling&quot;);" line303="                    break;" line304="                default:" line305="                    console.log(&quot;Unknown free avoidance command&quot;);" line306="            }" line307="        }" line308="    }" line309="" line310="    /**" line311="     * Stair Walking Control " line312="     */" line313="    //% blockId=Stair_Walking_Control" line314="    //% block=&quot;Set Stair Walking %mode&quot;" line315="    //% weight=97" line316="    //% color=&quot;#33cc33&quot;" line317="    //% icon=&quot;\uf05b&quot;" line318="    export function stairWalkingControl(mode: StairWalking) {" line319="        const currentTime7 = control.millis();" line320="        if (currentTime7 - lastCommandTime &gt; debounceInterval) {" line321="            lastCommandTime = currentTime7;" line322="            switch (mode) {" line323="                case StairWalking.StairWalkOn:" line324="                    radio.sendString(&quot;StairWalkOn\n&quot;);" line325="                    console.log(&quot;Stair Walking: Enabling&quot;);" line326="                    break;" line327="                case StairWalking.StairWalkOff:" line328="                    radio.sendString(&quot;StairWalkOff\n&quot;);" line329="                    console.log(&quot;Stair Walking: Disabling&quot;);" line330="                    break;" line331="                default:" line332="                    console.log(&quot;Unknown stair walking command&quot;);" line333="            }" line334="        }" line335="    }" line336="" line337="    /**" line338="     * Lead Follow Control " line339="     */" line340="    //% blockId=Lead_Follow_Control" line341="    //% block=&quot;Set Lead Follow %mode&quot;" line342="    //% weight=96" line343="    //% color=&quot;#33cc33&quot;" line344="    //% icon=&quot;\uf05b&quot;" line345="    export function leadFollowControl(mode: LeadFollow) {" line346="        const currentTime8 = control.millis();" line347="        if (currentTime8 - lastCommandTime &gt; debounceInterval) {" line348="            lastCommandTime = currentTime8;" line349="            switch (mode) {" line350="                case LeadFollow.LeadFollowOn:" line351="                    radio.sendString(&quot;LeadFollowOn\n&quot;);" line352="                    console.log(&quot;Lead Follow: Enabling&quot;);" line353="                    break;" line354="                case LeadFollow.LeadFollowOff:" line355="                    radio.sendString(&quot;LeadFollowOff\n&quot;);" line356="                    console.log(&quot;Lead Follow: Disabling&quot;);" line357="                    break;" line358="                default:" line359="                    console.log(&quot;Unknown lead follow command&quot;);" line360="            }" line361="        }" line362="    }" line363="" line364="    /**" line365="     * Free Bound Control " line366="     */" line367="    //% blockId=Free_Bound_Control" line368="    //% block=&quot;Set Free Bound %mode&quot;" line369="    //% weight=95" line370="    //% color=&quot;#33cc33&quot;" line371="    //% icon=&quot;\uf05b&quot;" line372="    export function freeBoundControl(mode: FreeBound) {" line373="        const currentTime9 = control.millis();" line374="        if (currentTime9 - lastCommandTime &gt; debounceInterval) {" line375="            lastCommandTime = currentTime9;" line376="            switch (mode) {" line377="                case FreeBound.FreeBoundOn:" line378="                    radio.sendString(&quot;FreeBoundOn\n&quot;);" line379="                    console.log(&quot;Free Bound: Enabling&quot;);" line380="                    break;" line381="                case FreeBound.FreeBoundOff:" line382="                    radio.sendString(&quot;FreeBoundOff\n&quot;);" line383="                    console.log(&quot;Free Bound: Disabling&quot;);" line384="                    break;" line385="                default:" line386="                    console.log(&quot;Unknown free bound command&quot;);" line387="            }" line388="        }" line389="    }" line390="" line391="    /**" line392="     * Free Jump Control " line393="     */" line394="    //% blockId=Free_Jump_Control" line395="    //% block=&quot;Set Free Jump %mode&quot;" line396="    //% weight=94" line397="    //% color=&quot;#33cc33&quot;" line398="    //% icon=&quot;\uf05b&quot;" line399="    export function freeJumpControl(mode: FreeJump) {" line400="        const currentTime10 = control.millis();" line401="        if (currentTime10 - lastCommandTime &gt; debounceInterval) {" line402="            lastCommandTime = currentTime10;" line403="            switch (mode) {" line404="                case FreeJump.FreeJumpOn:" line405="                    radio.sendString(&quot;FreeJumpOn\n&quot;);" line406="                    console.log(&quot;Free Jump: Enabling&quot;);" line407="                    break;" line408="                case FreeJump.FreeJumpOff:" line409="                    radio.sendString(&quot;FreeJumpOff\n&quot;);" line410="                    console.log(&quot;Free Jump: Disabling&quot;);" line411="                    break;" line412="                default:" line413="                    console.log(&quot;Unknown free jump command&quot;);" line414="            }" line415="        }" line416="    }" line417="}" numlines="418"></mutation></block></statement></block></xml>