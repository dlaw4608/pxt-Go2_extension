<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="LXE%fxqu$oY$:X`Po-BM" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="T~cM;71h*4yuLak08=j8"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace Dog_Commands {" line1="    const debounceInterval = 500;" line2="    const moveDebounceInterval = 100;" line3="    let lastCommandTime = 0;" line4="" line5="    " line6="    /**" line7="     * Sends a command to the dog" line8="     */" line9="    //% blockId=Go2_Command" line10="    //% block=&quot;(normal) Tell Dog to %command&quot;" line11="    //% command.fieldEditor=&quot;gridpicker&quot;" line12="    //% command.fieldOptions.columns=4" line13="    //% command.fieldOptions.tooltips=&quot;false&quot;" line14="    //% command.fieldOptions.width=&quot;100&quot;" line15="    //% weight=100 " line16="    //% color=&quot;#ff6680&quot; " line17="    //% icon=&quot;\uf021&quot;" line18="    export function sendCommand(command: DogCommands) {" line19="        const currentTime = control.millis();" line20="        if (currentTime - lastCommandTime &gt; debounceInterval) {" line21="            switch (command) {" line22="                case DogCommands.Sit:" line23="                    radio.sendString(&quot;Sit \n&quot;);" line24="                    console.log(&quot;Command: Sit&quot;);" line25="                    break;" line26="                case DogCommands.RiseSit:" line27="                    radio.sendString(&quot;RiseSit \n&quot;);" line28="                    console.log(&quot;Command: RiseSit&quot;);" line29="                    break;" line30="                case DogCommands.StandUp:" line31="                    radio.sendString(&quot;StandUp \n&quot;);" line32="                    console.log(&quot;Command: StandUp&quot;);" line33="                    break;" line34="                case DogCommands.StandDown:" line35="                    radio.sendString(&quot;StandDown \n&quot;);" line36="                    console.log(&quot;Command: StandDown&quot;);" line37="                    break;" line38="                case DogCommands.Hello:" line39="                    radio.sendString(&quot;Hello \n&quot;);" line40="                    console.log(&quot;Command: Hello&quot;);" line41="                    break;" line42="                case DogCommands.Stretch:" line43="                    radio.sendString(&quot;Stretch \n&quot;);" line44="                    console.log(&quot;Command: Stretch&quot;);" line45="                    break;" line46="                case DogCommands.Wallow:" line47="                    radio.sendString(&quot;Wallow \n&quot;);" line48="                    console.log(&quot;Command: Wallow&quot;);" line49="                    break;" line50="                case DogCommands.Dance1:" line51="                    radio.sendString(&quot;Dance1 \n&quot;);" line52="                    console.log(&quot;Command: Dance 1&quot;);" line53="                    break;" line54="                case DogCommands.Dance2:" line55="                    radio.sendString(&quot;Dance2 \n&quot;);" line56="                    console.log(&quot;Command: Dance 2&quot;);" line57="                    break;" line58="                case DogCommands.FrontJump:" line59="                    radio.sendString(&quot;FrontJump \n&quot;);" line60="                    console.log(&quot;Command: Front Jump&quot;);" line61="                    break;" line62="                case DogCommands.FrontPounce:" line63="                    radio.sendString(&quot;FrontPounce \n&quot;);" line64="                    console.log(&quot;Command: Front Pounce&quot;);" line65="                    break;" line66="                default:" line67="                    console.log(&quot;Unknown command&quot;);" line68="            }" line69="        }" line70="    }" line71="" line72="    /**" line73="        * Sends a command to the dog (AI Only)" line74="        */" line75="    //% blockId=Go2_CommandAI" line76="    //% block=&quot;(AI) Tell Dog to %command&quot;" line77="    //% command.fieldEditor=&quot;gridpicker&quot;" line78="    //% command.fieldOptions.columns=4" line79="    //% command.fieldOptions.tooltips=&quot;false&quot;" line80="    //% command.fieldOptions.width=&quot;100&quot;" line81="    //% weight=100 " line82="    //% color=&quot;#ff6680&quot; " line83="    //% icon=&quot;\uf021&quot;" line84="    export function sendAICommand(command: DogCommandsAI) {" line85="        const currentTime2 = control.millis();" line86="        if (currentTime2 - lastCommandTime &gt; debounceInterval) {" line87="            switch (command) {" line88="                case DogCommandsAI.Handstand:" line89="                    radio.sendString(&quot;Handstand \n&quot;);" line90="                    console.log(&quot;Command: Handstand&quot;);" line91="                    break;" line92="                case DogCommandsAI.StandDown:" line93="                    radio.sendString(&quot;StandDown \n&quot;);" line94="                    console.log(&quot;Command: StandDown&quot;);" line95="                    break;" line96="                case DogCommandsAI.Bound:" line97="                    radio.sendString(&quot;Bound \n&quot;);" line98="                    console.log(&quot;Command: Bound&quot;);" line99="                    break;" line100="                case DogCommandsAI.BackFlip:" line101="                    radio.sendString(&quot;BackFlip \n&quot;);" line102="                    console.log(&quot;Command: BackFlip&quot;);" line103="                    break;" line104="                case DogCommandsAI.FrontFlip:" line105="                    radio.sendString(&quot;FrontFlip \n&quot;);" line106="                    console.log(&quot;Command: FrontFlip&quot;);" line107="                    break;" line108="                default:" line109="                    console.log(&quot;Unknown command&quot;);" line110="            }" line111="        }" line112="    }" line113="    export enum DogCommands {" line114="        //% block=&quot;Sit&quot;" line115="        Sit," line116="        //% block=&quot;RiseSit&quot;" line117="        RiseSit," line118="        //% block=&quot;StandUp&quot;" line119="        StandUp," line120="        //% block=&quot;StandDown&quot;" line121="        StandDown," line122="        //% block=&quot;Hello&quot;" line123="        Hello," line124="        //% block=&quot;Stretch&quot;" line125="        Stretch," line126="        //% block=&quot;Wallow&quot;" line127="        Wallow," line128="        //% block=&quot;Dance 1&quot;" line129="        Dance1," line130="        //% block=&quot;Dance 2&quot;" line131="        Dance2," line132="        //% block=&quot;Front Jump&quot;" line133="        FrontJump," line134="        //% block=&quot;Front Pounce&quot;" line135="        FrontPounce" line136="" line137="    }" line138="" line139="    export enum DogCommandsAI {" line140="        //% block=&quot;Handstand&quot;" line141="        Handstand," line142="        //% block=&quot;StandDown&quot;" line143="        StandDown," line144="        //% block=&quot;Bound&quot;" line145="        Bound," line146="        //% block=&quot;BackFlip&quot;" line147="        BackFlip," line148="        //% block=&quot;FrontFlip&quot;" line149="        FrontFlip" line150="    }" line151="" line152="    //% blockId=MoveGo2" line153="    //% block=&quot;Move Dog x:%x y:%y z:%z&quot;" line154="    //% x.min=-1 x.max=1 x.defl=0" line155="    //% y.min=-1 y.max=1 y.defl=0" line156="    //% z.min=-1 z.max=1 z.defl=0" line157="    //% weight=100 " line158="    //% color=&quot;#ff6680&quot; " line159="    //% icon=&quot;\uf021&quot;" line160="    export function moveDog(x: number, y: number, z: number) {" line161="        const currentTime22 = control.millis();" line162="        if (currentTime22 - lastCommandTime &gt; moveDebounceInterval) {" line163="            lastCommandTime = currentTime22;" line164="            let command = `Move,${x},${y},${z}\n`;" line165="            radio.sendString(command);" line166="            console.log('Move command sent: ${ command }');" line167="        } else {" line168="            console.log(&quot;Move command skipped due to debounce interval&quot;);" line169="        }" line170="    }" line171="" line172="    export enum ModeSwitch {" line173="        //% block=&quot;Normal Mode&quot;" line174="        Normal," line175="        //% block=&quot;AI Mode&quot;" line176="        AI," line177="    }" line178="" line179="    export enum ObstacleAvoidance {" line180="        //% block=&quot;Obstacle Avoidance On&quot;" line181="        ObstacleOn," line182="        //% block=&quot;Obstacle Avoidance Off&quot;" line183="        ObstacleOff" line184="    }" line185="" line186="    /**" line187="     * Obstacle Avoidance Control" line188="     */" line189="    //% blockId=Obstacle_Avoidance_Control" line190="    //% block=&quot;Set %mode&quot;" line191="    //% weight=99" line192="    //% color=&quot;#33cc33&quot;" line193="    //% icon=&quot;\uf05b&quot;" line194="    export function obstacleAvoidanceControl(mode: ObstacleAvoidance) {" line195="        const currentTime3 = control.millis();" line196="        if (currentTime3 - lastCommandTime &gt; debounceInterval) {" line197="            lastCommandTime = currentTime3;" line198="            switch (mode) {" line199="                case ObstacleAvoidance.ObstacleOn:" line200="                    radio.sendString(&quot;ObstacleOn\n&quot;);" line201="                    console.log(&quot;Obstacle Avoidance: Enabling&quot;);" line202="                    break;" line203="                case ObstacleAvoidance.ObstacleOff:" line204="                    radio.sendString(&quot;ObstacleOff\n&quot;);" line205="                    console.log(&quot;Obstacle Avoidance: Disabling&quot;);" line206="                    break;" line207="                default:" line208="                    console.log(&quot;Unknown obstacle command&quot;);" line209="            }" line210="        }" line211="    }" line212="" line213="" line214="    /**" line215="     * Mode Switcher" line216="     */" line217="    //% blockId=Mode_Switcher" line218="    //% block=&quot;Change Mode to %mode&quot;" line219="    //% weight=100 " line220="    //% color=&quot;#ff6680&quot; " line221="    //% icon=&quot;\uf021&quot;" line222="    export function modeSwitch(mode: ModeSwitch) {" line223="        const currentTime32 = control.millis();" line224="        if (currentTime32 - lastCommandTime &gt; debounceInterval) {" line225="            lastCommandTime = currentTime32;" line226="            switch (mode) {" line227="                case ModeSwitch.Normal:" line228="                    radio.sendString(&quot;normal\n&quot;);" line229="                    console.log(&quot;Mode: Changing to Normal mode&quot;);" line230="                    break;" line231="                case ModeSwitch.AI:" line232="                    radio.sendString(&quot;ai\n&quot;);" line233="                    console.log(&quot;Mode: Changing to AI Mode&quot;);" line234="                    break;" line235="                default:" line236="                    console.log(&quot;Unknown command&quot;);" line237="            }" line238="        }" line239="    }" line240="}" numlines="241"></mutation></block></statement></block></xml>