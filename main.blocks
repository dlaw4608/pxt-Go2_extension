<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="PyfqpK.]@tI7Y3/A11DI" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="%x5[!RH?+ibW?W]k1gkT"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace Dog_Commands_BT {" line1="    const debounceInterval = 500;" line2="    const moveDebounceInterval = 100;" line3="    let lastCommandTime = 0;" line4="    /**" line5="     * Sends a command to the dog over Bluetooth" line6="     */" line7="    //% blockId=Go2_Command_BT" line8="    //% block=&quot;Tell Dog over Bluetooth to %command&quot;" line9="    //% command.fieldEditor=&quot;gridpicker&quot;" line10="    //% command.fieldOptions.columns=4" line11="    //% command.fieldOptions.tooltips=&quot;false&quot;" line12="    //% command.fieldOptions.width=&quot;100&quot;" line13="    //% weight=100" line14="    //% color=&quot;#66ccff&quot;" line15="    //% icon=&quot;\uf287&quot;" line16="    export function sendCommandBT(command: DogCommands_BT) {" line17="        const currentTime = control.millis();" line18="        if (currentTime - lastCommandTime &gt; debounceInterval) {" line19="            lastCommandTime = currentTime;" line20="            switch (command) {" line21="                case DogCommands_BT.Sit:" line22="                    bluetooth.uartWriteString(&quot;Sit\n&quot;);" line23="                    console.log(&quot;BT Command: Sit&quot;);" line24="                    break;" line25="                case DogCommands_BT.RiseSit:" line26="                    bluetooth.uartWriteString(&quot;RiseSit\n&quot;);" line27="                    console.log(&quot;BT Command: RiseSit&quot;);" line28="                    break;" line29="                case DogCommands_BT.StandUp:" line30="                    bluetooth.uartWriteString(&quot;StandUp\n&quot;);" line31="                    console.log(&quot;BT Command: StandUp&quot;);" line32="                    break;" line33="                case DogCommands_BT.StandDown:" line34="                    bluetooth.uartWriteString(&quot;StandDown\n&quot;);" line35="                    console.log(&quot;BT Command: StandDown&quot;);" line36="                    break;" line37="                case DogCommands_BT.Hello:" line38="                    bluetooth.uartWriteString(&quot;Hello\n&quot;);" line39="                    console.log(&quot;BT Command: Hello&quot;);" line40="                    break;" line41="                case DogCommands_BT.Stretch:" line42="                    bluetooth.uartWriteString(&quot;Stretch\n&quot;);" line43="                    console.log(&quot;BT Command: Stretch&quot;);" line44="                    break;" line45="                case DogCommands_BT.Wallow:" line46="                    bluetooth.uartWriteString(&quot;Wallow\n&quot;);" line47="                    console.log(&quot;BT Command: Wallow&quot;);" line48="                    break;" line49="                case DogCommands_BT.Dance1:" line50="                    bluetooth.uartWriteString(&quot;Dance1\n&quot;);" line51="                    console.log(&quot;BT Command: Dance1&quot;);" line52="                    break;" line53="                case DogCommands_BT.Dance2:" line54="                    bluetooth.uartWriteString(&quot;Dance2\n&quot;);" line55="                    console.log(&quot;BT Command: Dance2&quot;);" line56="                    break;" line57="                case DogCommands_BT.FrontJump:" line58="                    bluetooth.uartWriteString(&quot;FrontJump\n&quot;);" line59="                    console.log(&quot;BT Command: FrontJump&quot;);" line60="                    break;" line61="                case DogCommands_BT.FrontPounce:" line62="                    bluetooth.uartWriteString(&quot;FrontPounce\n&quot;);" line63="                    console.log(&quot;BT Command: FrontPounce&quot;);" line64="                    break;" line65="                default:" line66="                    console.log(&quot;BT: Unknown command&quot;);" line67="            }" line68="        }" line69="    }" line70="    /**" line71="     * Move Dog over Bluetooth" line72="     */" line73="    //% blockId=MoveGo2_BT" line74="    //% block=&quot;Move Dog over Bluetooth x:%x y:%y z:%z&quot;" line75="    //% x.min=-1 x.max=1 x.defl=0" line76="    //% y.min=-1 y.max=1 y.defl=0" line77="    //% z.min=-1 z.max=1 z.defl=0" line78="    //% weight=100" line79="    //% color=&quot;#66ccff&quot;" line80="    //% icon=&quot;\uf287&quot;" line81="    export function moveDogBT(x: number, y: number, z: number) {" line82="        const currentTime2 = control.millis();" line83="        if (currentTime2 - lastCommandTime &gt; moveDebounceInterval) {" line84="            lastCommandTime = currentTime2;" line85="            let command = `Move,${x},${y},${z}\n`;" line86="            bluetooth.uartWriteString(command);" line87="            console.log(`BT Move command sent: ${command}`);" line88="        } else {" line89="            console.log(&quot;BT Move command skipped due to debounce interval&quot;);" line90="        }" line91="    }" line92="    /**" line93="     * Mode Switcher over Bluetooth" line94="     */" line95="    //% blockId=Mode_Switcher_BT" line96="    //% block=&quot;Change Bluetooth Mode to %mode&quot;" line97="    //% weight=100" line98="    //% color=&quot;#66ccff&quot;" line99="    //% icon=&quot;\uf287&quot;" line100="    export function modeSwitchBT(mode: ModeSwitchBT) {" line101="        const currentTime3 = control.millis();" line102="        if (currentTime3 - lastCommandTime &gt; debounceInterval) {" line103="            lastCommandTime = currentTime3;" line104="            switch (mode) {" line105="                case ModeSwitchBT.Normal:" line106="                    bluetooth.uartWriteString(&quot;normal\n&quot;);" line107="                    console.log(&quot;BT Mode: Normal&quot;);" line108="                    break;" line109="                case ModeSwitchBT.AI:" line110="                    bluetooth.uartWriteString(&quot;ai\n&quot;);" line111="                    console.log(&quot;BT Mode: AI&quot;);" line112="                    break;" line113="                default:" line114="                    console.log(&quot;BT: Unknown mode&quot;);" line115="            }" line116="        }" line117="    }" line118="    // ENUM for Commands" line119="    export enum DogCommands_BT {" line120="        //% block=&quot;Sit&quot;" line121="        Sit," line122="        //% block=&quot;RiseSit&quot;" line123="        RiseSit," line124="        //% block=&quot;StandUp&quot;" line125="        StandUp," line126="        //% block=&quot;StandDown&quot;" line127="        StandDown," line128="        //% block=&quot;Hello&quot;" line129="        Hello," line130="        //% block=&quot;Stretch&quot;" line131="        Stretch," line132="        //% block=&quot;Wallow&quot;" line133="        Wallow," line134="        //% block=&quot;Dance 1&quot;" line135="        Dance1," line136="        //% block=&quot;Dance 2&quot;" line137="        Dance2," line138="        //% block=&quot;Front Jump&quot;" line139="        FrontJump," line140="        //% block=&quot;Front Pounce&quot;" line141="        FrontPounce" line142="    }" line143="    // ENUM for Mode Switcher" line144="    export enum ModeSwitchBT {" line145="        //% block=&quot;Normal Mode&quot;" line146="        Normal," line147="        //% block=&quot;AI Mode&quot;" line148="        AI," line149="    }" line150="}" numlines="151"></mutation></block></statement></block></xml>